<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Welcome to use AyomarManage</title>
    <link href="/lib/element/css/index.css" rel="stylesheet" />
    <link href="/lib/icons/css/iconfont.css" rel="stylesheet" />
</head>
<body>
    <el-container class="ayomar-h-full" id="app">
        <el-header height="50px">
            <el-menu class="ayomar-horizontal" mode="horizontal">
                <el-menu-item index="0" class="logo" :style="isCollapse?'width:64px;':'width:200px;'"><a href="/"><img src="/images/commons/am_menus_top.png" style="width:45px;" v-if="isCollapse"><img class="hidden-folded m-l-xs" src="~/images/commons/am_menus_top_title.png" style="max-height:50px;" v-else /></a></el-menu-item>
                <el-menu-item index="1"><a @@click="isCollapse = !isCollapse"><i class="el-icon-menu"></i></a></el-menu-item>
                <el-submenu index="2">
                    <template slot="title">
                        我的工作台
                    </template>
                    <el-submenu :index="space.Id" v-for="space in Menus" style="float:none;" :key="space.Id">
                        <template slot="title">
                            {{space.Title}}
                        </template>
                        <el-submenu :index="manage.Id" v-for="manage in space.Menus" style="float:none;" :key="manage.Id">
                            <template slot="title">
                                <i :class="manage.Icon"></i> {{manage.Title}}
                            </template>
                            <el-menu-item :index="item.Id" v-for="item in manage.Items" :key="item.Id" style="float:none;"><a @@click="openLink(item.url)" v-text="item.Title"></a></el-menu-item>
                        </el-submenu>
                    </el-submenu>
                </el-submenu>
                <el-submenu index="3" style="float:right">
                    <template slot="title">
                        <i class="iconfont icon-yonghu" style="font-size:20px;color:#23b7e5"></i>
                    </template>
                    <el-menu-item index="3-1"><a href="/SystemManage/Account">用户中心</a><i class="iconfont icon-yonghu" style="margin-left:15px;"></i></el-menu-item>
                    <el-menu-item index="3-2"><a href="/SystemManage/Account">修改密码</a><i class="iconfont icon-suo" style="margin-left:15px;"></i></el-menu-item>
                    <el-menu-item index="3-3"><a href="/SystemManage/Account">二级密码</a><i class="iconfont icon-security" style="margin-left:15px;"></i></el-menu-item>
                    <el-menu-item index="3-4"><a href="/SystemManage/Account">安全退出</a><i class="iconfont icon-exit" style="margin-left:15px;"></i></el-menu-item>
                </el-submenu>
                <el-menu-item index="4" style="float:right"><i class="el-icon-time" style="color:#ec0c72"></i><span v-text="timeNow"></span></el-menu-item>
            </el-menu>
        </el-header>
        <el-container>
            <el-aside :width="isCollapse?'64px':'200px'" style="background-color:rgb(58, 63, 81)">
                <el-row>
                    <el-col>
                        <el-menu class="ayomarMenus"
                                 :unique-opened="true"
                                 :collapse="isCollapse"
                                 :default-active="defaultActive">

                            <div v-for="space in Menus" :key="space.Id">
                                <div class="ayomarSpaceTitle" v-text="space.Title"></div>
                                <el-submenu :index="manage.Id" v-for="manage in space.Menus" :key="manage.Id">
                                    <template slot="title">
                                        <i :class="manage.Icon"></i>
                                        <span v-text="manage.Title"></span>
                                    </template>
                                    <el-menu-item :index="item.Id" v-for="item in manage.Items" :key="item.Id"><a @@click="openLink(item.url)" v-text="item.Title"></a></el-menu-item>
                                </el-submenu>
                            </div>
                        </el-menu>
                    </el-col>
                </el-row>
            </el-aside>
            <el-main v-loading="loadingDatas">
                @RenderBody()
            </el-main>
        </el-container>
    </el-container>
</body>
</html>
<script src="/lib/vue/lib/vue.min.js"></script>
<script src="/lib/vue/lib/vue-resource.min.js"></script>
<script src="/lib/element/js/index.js"></script>
@RenderSection("Scripts", required: false)
<script>
    const [...permissions] = @Html.Raw(ViewContext.HttpContext.Items["PermissJson"]);
    var vm = new Vue({
        el: '#app',
        data() {
            return {
                Model: Object,
                Menus: [],
                isCollapse: false,
                defaultActive: '',
                moduleManage:'',
                loadingDatas: false,
                multipleSelection: [],
                dialogFormVisible: false,
                loading: false,
                timeNow:''
            }
        },
        created() {
            if (localStorage.getItem("menus") === null) {
                this.$http.get("/SystemManage/Home/GetManageMenus")
                    .then((res) => {
                        this.$set(this, 'Menus', res.json());
                        localStorage.setItem("menus", res.data);
                    });
            } else {
                this.$set(this, 'Menus', JSON.parse(localStorage.getItem("menus")));
            }
            let url = window.location.href.split("/");
            let value = url[url.length - 1].includes('?') ? url[url.length - 1].split("?")[0] : url[url.length - 1];
            this.moduleManage = url[url.length - 1].includes('?') ? '/' + url[url.length - 2] + '/' + url[url.length - 1].split("?")[0] : '/' + url[url.length - 2] + '/' +url[url.length - 1];
            value = value.replace(/\b[a-z]/g, char => char.toUpperCase());
            this.defaultActive = value;
            if (localStorage.getItem("isCollapse") !== null) {
                this.isCollapse = localStorage.getItem("isCollapse") === 'true';
            }
            setInterval(function () { vm.timeNow = new Date().toLocaleString(); }, 1000);
        },
        methods: {
            openLink(url) {
                window.location.href = url;
            },
            checkPermission() {
                document.querySelectorAll("main button").forEach((node) => {
                    if (node.getAttribute("action") !== null) {
                        if (!permissions.includes(node.getAttribute("action").toLowerCase())) {
                            node.remove();
                        }
                    }
                });
            },
            refreshPage() {
                location.reload();
            },
            handleSelectionChange(val) {
                this.multipleSelection = val;
            },
            handleNew() {
                this.dialogFormVisible = true;
            },
            handleEdit(row) {
                this.Model = row;
                this.dialogFormVisible = true;
            },
            handleDelete(row) {
                this.multipleSelection.push(row);
                this.handleDeletes();
            },
            handleDeletes(module) {
                if (this.multipleSelection.length == 0) {
                    this.$message({
                        type: 'error',
                        center: true,
                        message: '请选择要删除的数据'
                    });

                } else {
                    this.$confirm('此操作将永久删除该数据, 是否继续?', {
                        confirmButtonText: '确定',
                        cancelButtonText: '取消',
                        type: 'warning',
                        center: true
                    }).then(() => {
                        this.$prompt('敏感操作：请输入您的二级密码', {
                            inputType: 'password',
                            confirmButtonText: '确定',
                            cancelButtonText: '取消',
                            inputPattern: /^[\s\S]*.*[^\s][\s\S]*$/,
                            inputErrorMessage: '请输入二级密码'
                        }).then(({ value }) => {
                            this.$http.post('/Components/ValidateIdentity/VerffyPassword', { password: value }, {
                                emulateJSON: true
                            }).then((res) => {
                                let data = res.json();
                                if (data.success) {
                                    this.$http.post(this.moduleManage + '/Deletes', { values: Array.from(this.multipleSelection, s => s.GUID) }, { emulateJSON: true, before: function () { this.loadingDatas = true;this.multipleSelection = []; } }).then((res) => {
                                        let data = res.json();
                                        if (data.success) {
                                            if (data.returnUrl === null || data.returnUrl === undefined) {
                                                this.$message({
                                                    type: 'success',
                                                    center: true,
                                                    message: data.message,
                                                    onClose: function () {
                                                        vm.getData();
                                                    }
                                                });
                                            } else { location.href = data.returnUrl; }
                                        } else {
                                            this.$message({
                                                type: 'error',
                                                center: true,
                                                message: data.message,
                                                onClose: function () {
                                                    vm.loadingDatas = false;
                                                }
                                            });
                                        }
                                    }).catch((res) => {
                                        this.$message({
                                            type: 'error',
                                            center: true,
                                            message: '操作失败',
                                            onClose: function () {
                                                vm.loadingDatas = false;
                                            }
                                        });
                                    });

                                } else {
                                    this.multipleSelection = [];
                                    this.$message({
                                        type: 'error',
                                        center: true,
                                        message: '验证失败'
                                    });
                                }
                                }).catch((res) => {
                                    this.multipleSelection = [];
                                this.$message({
                                    type: 'error',
                                    center: true,
                                    message: '验证失败'
                                });
                            });
                            }).catch(() => {
                                this.multipleSelection = [];
                            this.$message({
                                type: 'info',
                                center: true,
                                message: '取消操作'
                            });
                        });
                        }).catch(() => {
                            this.multipleSelection = [];
                        this.$message({
                            type: 'info',
                            center: true,
                            message: '取消操作'
                        });
                    });
                }

            },
            submitForm(formName) {
                this.$refs[formName].validate((valid) => {
                    if (valid) {
                        this.$http.post(this.moduleManage +'/PutAsync', { entity: this.Model, __RequestVerificationToken: document.getElementsByName("__RequestVerificationToken")[0].value }, {
                            emulateJSON: true, before: function () {
                                this.loading = true;
                            }
                        }).then((res) => {
                            let data = res.json();
                            if (data.success) {
                                if (data.returnUrl === null || data.returnUrl === undefined) {
                                    this.$message({
                                        type: 'success',
                                        center: true,
                                        message: data.message,
                                        onClose: function () {
                                            vm.loading = false;
                                            vm.dialogFormVisible = false;
                                            vm.getData();
                                        }
                                    });
                                } else { location.href = data.returnUrl; }
                            } else {
                                this.$message({
                                    type: 'error',
                                    center: true,
                                    message: data.message,
                                    onClose: function () {
                                        vm.loading = false;
                                        vm.dialogFormVisible = false;
                                    }
                                });
                            }
                        }).catch((res) => {
                            this.$message({
                                type: 'error',
                                center: true,
                                message: '系统超时'
                            });
                            this.loading = false;
                        });
                    } else {
                        return false;
                    }
                });
            }
        },
        watch: {
            isCollapse: function (val) {
                localStorage.setItem("isCollapse", val);
            }

        },
        mixins: [mixin]
    });
</script>